{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmate\\\\dev\\\\diploma-cytoscape\\\\src\\\\components\\\\Network.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ncytoscape.use(cola);\nconst Network = ({\n  data\n}) => {\n  _s();\n  const cyRef = useRef(null);\n  useEffect(() => {\n    if (!data) return;\n    const cy = cytoscape({\n      container: cyRef.current,\n      elements: [],\n      style: [{\n        selector: 'node',\n        style: {\n          'background-color': 'data(visitedColor)',\n          label: 'data(label)',\n          color: '#fff',\n          'text-valign': 'center',\n          'text-halign': 'center'\n        }\n      }, {\n        selector: 'edge',\n        style: {\n          width: 2,\n          'line-color': '#ccc',\n          'target-arrow-shape': 'triangle',\n          'target-arrow-color': '#ccc',\n          'curve-style': 'bezier'\n        }\n      }],\n      layout: {\n        name: 'preset'\n      }\n    });\n\n    // Generate grid\n    const visitedNodes = new Set();\n    data.x.forEach((x, index) => {\n      const y = data.y[index];\n      visitedNodes.add(`${x},${y}`);\n      cy.add({\n        group: 'nodes',\n        data: {\n          id: `${x},${y}`,\n          visitedColor: '#f00',\n          label: `${index}`\n        },\n        position: {\n          x: x * 50,\n          y: y * 50\n        }\n      });\n      // Connect nodes with directed edges\n      if (index > 0) {\n        const sourceX = data.x[index - 1];\n        const sourceY = data.y[index - 1];\n        cy.add({\n          group: 'edges',\n          data: {\n            id: `e${index}`,\n            source: `${sourceX},${sourceY}`,\n            target: `${x},${y}`\n          }\n        });\n      }\n    });\n\n    // Fill in the rest of the grid\n    for (let x = 0; x < data.grid_x; x++) {\n      for (let y = 0; y < data.grid_y; y++) {\n        const id = `${x},${y}`;\n        if (!visitedNodes.has(id)) {\n          cy.add({\n            group: 'nodes',\n            data: {\n              id: id,\n              visitedColor: '#666',\n              label: ''\n            },\n            position: {\n              x: x * 50,\n              y: y * 50\n            }\n          });\n        }\n      }\n    }\n\n    // Apply layout\n    cy.layout({\n      name: 'preset'\n    }).run();\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: cyRef,\n    style: {\n      width: '100%',\n      height: '600px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 10\n  }, this);\n};\n_s(Network, \"l44NKnb2pDeOf4GBSfGBKpLpmXM=\");\n_c = Network;\nexport default Network;\nvar _c;\n$RefreshReg$(_c, \"Network\");","map":{"version":3,"names":["React","useEffect","useRef","cytoscape","cola","jsxDEV","_jsxDEV","use","Network","data","_s","cyRef","cy","container","current","elements","style","selector","label","color","width","layout","name","visitedNodes","Set","x","forEach","index","y","add","group","id","visitedColor","position","sourceX","sourceY","source","target","grid_x","grid_y","has","run","ref","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gmate/dev/diploma-cytoscape/src/components/Network.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport cytoscape from 'cytoscape';\r\nimport cola from 'cytoscape-cola';\r\n\r\ncytoscape.use(cola);\r\n\r\nconst Network = ({ data }) => {\r\n  const cyRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!data) return;\r\n\r\n    const cy = cytoscape({\r\n      container: cyRef.current,\r\n      elements: [],\r\n      style: [\r\n        {\r\n          selector: 'node',\r\n          style: {\r\n            'background-color': 'data(visitedColor)',\r\n            label: 'data(label)',\r\n            color: '#fff',\r\n            'text-valign': 'center',\r\n            'text-halign': 'center',\r\n          },\r\n        },\r\n        {\r\n          selector: 'edge',\r\n          style: {\r\n            width: 2,\r\n            'line-color': '#ccc',\r\n            'target-arrow-shape': 'triangle',\r\n            'target-arrow-color': '#ccc',\r\n            'curve-style': 'bezier',\r\n          },\r\n        },\r\n      ],\r\n      layout: {\r\n        name: 'preset',\r\n      },\r\n    });\r\n\r\n    // Generate grid\r\n    const visitedNodes = new Set();\r\n    data.x.forEach((x, index) => {\r\n        const y = data.y[index];\r\n        visitedNodes.add(`${x},${y}`);\r\n        cy.add({\r\n            group: 'nodes',\r\n            data: { id: `${x},${y}`, visitedColor: '#f00', label: `${index}` },\r\n            position: { x: x * 50, y: y * 50 },\r\n          });\r\n      // Connect nodes with directed edges\r\n      if (index > 0) {\r\n        const sourceX = data.x[index - 1];\r\n        const sourceY = data.y[index - 1];\r\n        cy.add({\r\n          group: 'edges',\r\n          data: {\r\n            id: `e${index}`,\r\n            source: `${sourceX},${sourceY}`,\r\n            target: `${x},${y}`,\r\n          },\r\n        });\r\n      }\r\n    });\r\n\r\n    // Fill in the rest of the grid\r\n    for (let x = 0; x < data.grid_x; x++) {\r\n        for (let y = 0; y < data.grid_y; y++) {\r\n          const id = `${x},${y}`;\r\n          if (!visitedNodes.has(id)) {\r\n            cy.add({\r\n              group: 'nodes',\r\n              data: { id: id, visitedColor: '#666', label: '' },\r\n              position: { x: x * 50, y: y * 50 },\r\n            });\r\n          }\r\n        }\r\n    }\r\n\r\n    // Apply layout\r\n    cy.layout({ name: 'preset' }).run();\r\n\r\n  }, [data]);\r\n\r\n  return <div ref={cyRef} style={{ width: '100%', height: '600px' }} />;\r\n};\r\n\r\nexport default Network;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}