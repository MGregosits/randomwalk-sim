{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmate\\\\dev\\\\diploma-cytoscape\\\\src\\\\components\\\\Network.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport cytoscape from 'cytoscape';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Network = ({\n  data\n}) => {\n  _s();\n  const cyRef = useRef(null);\n  useEffect(() => {\n    if (data && data.x && data.y) {\n      const cy = cytoscape({\n        container: cyRef.current,\n        elements: [],\n        // Initialize with empty elements; add nodes and edges dynamically\n        style: [{\n          selector: 'node',\n          style: {\n            'background-color': '#666',\n            label: 'data(id)'\n          }\n        }, {\n          selector: 'edge',\n          style: {\n            width: 3,\n            'line-color': '#ccc'\n          }\n        }],\n        layout: {\n          name: 'preset'\n        }\n      });\n\n      // Add nodes with unique ID check\n      data.x.forEach((x, i) => {\n        const nodeId = `${x},${data.y[i]}`;\n        if (cy.getElementById(nodeId).length === 0) {\n          cy.add({\n            group: 'nodes',\n            data: {\n              id: nodeId\n            },\n            position: {\n              x: x * 20,\n              y: data.y[i] * 20\n            }\n          });\n        }\n      });\n\n      // Add edges based on the walk sequence with unique ID check\n      for (let i = 0; i < data.walk.length - 1; i++) {\n        const edgeId = `e${i}`;\n        if (cy.getElementById(edgeId).length === 0) {\n          cy.add({\n            group: 'edges',\n            data: {\n              id: edgeId,\n              source: `${data.x[data.walk[i]]},${data.y[data.walk[i]]}`,\n              target: `${data.x[data.walk[i + 1]]},${data.y[data.walk[i + 1]]}`\n            }\n          });\n        }\n      }\n      cy.layout({\n        name: 'preset'\n      }).run();\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: cyRef,\n    style: {\n      width: '600px',\n      height: '600px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 10\n  }, this);\n};\n_s(Network, \"l44NKnb2pDeOf4GBSfGBKpLpmXM=\");\n_c = Network;\nexport default Network;\nvar _c;\n$RefreshReg$(_c, \"Network\");","map":{"version":3,"names":["React","useEffect","useRef","cytoscape","jsxDEV","_jsxDEV","Network","data","_s","cyRef","x","y","cy","container","current","elements","style","selector","label","width","layout","name","forEach","i","nodeId","getElementById","length","add","group","id","position","walk","edgeId","source","target","run","ref","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gmate/dev/diploma-cytoscape/src/components/Network.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport cytoscape from 'cytoscape';\r\n\r\nconst Network = ({ data }) => {\r\n  const cyRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (data && data.x && data.y) {\r\n      const cy = cytoscape({\r\n        container: cyRef.current,\r\n        elements: [], // Initialize with empty elements; add nodes and edges dynamically\r\n        style: [\r\n          {\r\n            selector: 'node',\r\n            style: {\r\n              'background-color': '#666',\r\n              label: 'data(id)',\r\n            },\r\n          },\r\n          {\r\n            selector: 'edge',\r\n            style: {\r\n              width: 3,\r\n              'line-color': '#ccc',\r\n            },\r\n          },\r\n        ],\r\n        layout: {\r\n          name: 'preset',\r\n        },\r\n      });\r\n\r\n      // Add nodes with unique ID check\r\n      data.x.forEach((x, i) => {\r\n        const nodeId = `${x},${data.y[i]}`;\r\n        if (cy.getElementById(nodeId).length === 0) {\r\n            cy.add({\r\n              group: 'nodes',\r\n              data: { id: nodeId },\r\n              position: { x: x * 20, y: data.y[i] * 20 },\r\n            });\r\n        }\r\n      });\r\n\r\n      // Add edges based on the walk sequence with unique ID check\r\n      for (let i = 0; i < data.walk.length - 1; i++) {\r\n        const edgeId = `e${i}`;\r\n        if (cy.getElementById(edgeId).length === 0) {\r\n            cy.add({\r\n              group: 'edges',\r\n              data: {\r\n                id: edgeId,\r\n                source: `${data.x[data.walk[i]]},${data.y[data.walk[i]]}`,\r\n                target: `${data.x[data.walk[i + 1]]},${data.y[data.walk[i + 1]]}`,\r\n              },\r\n            });\r\n          }\r\n      }\r\n\r\n      cy.layout({ name: 'preset' }).run();\r\n    }\r\n  }, [data]);\r\n\r\n  return <div ref={cyRef} style={{ width: '600px', height: '600px' }} />;\r\n};\r\n\r\nexport default Network;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}