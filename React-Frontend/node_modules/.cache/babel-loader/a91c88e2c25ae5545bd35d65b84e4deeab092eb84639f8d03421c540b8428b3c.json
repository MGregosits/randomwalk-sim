{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmate\\\\dev\\\\cytoscape-frontend-random-walk\\\\src\\\\components\\\\Network.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ncytoscape.use(cola);\nconst Network = ({\n  data\n}) => {\n  _s();\n  const cyRef = useRef(null);\n  useEffect(() => {\n    if (!data) return;\n    const cy = cytoscape({\n      container: cyRef.current,\n      elements: [],\n      style: [{\n        selector: 'node',\n        style: {\n          'background-color': 'data(visitedColor)',\n          label: 'data(label)',\n          color: '#333',\n          'text-valign': 'center',\n          'text-halign': 'center'\n        }\n      }, {\n        selector: 'edge',\n        style: {\n          width: 2,\n          'line-color': '#ccc',\n          'target-arrow-shape': 'triangle',\n          'target-arrow-color': '#ccc',\n          'curve-style': 'bezier'\n        }\n      }],\n      layout: {\n        name: 'preset'\n      }\n    });\n    const nodeVisits = {}; // Track node visits and steps\n\n    // Process each step in the walk\n    data.x.forEach((x, index) => {\n      const id = `${x},${data.y[index]}`;\n\n      // Record visit and step\n      if (!nodeVisits[id]) {\n        nodeVisits[id] = {\n          count: 0,\n          steps: []\n        };\n        // create node on the first visit\n        cy.add({\n          group: 'nodes',\n          data: {\n            id: id,\n            visitedColor: '#5f5',\n            label: `${id}`\n          },\n          position: {\n            x: x * 50,\n            y: y * 50\n          }\n        });\n      }\n      nodeVisits[id].count += 1;\n      nodeVisits[id].steps.push(index);\n\n      // Connect nodes with directed edges, considering repeated edges\n      if (index > 0) {\n        const prevState = data.walk[index - 1];\n        const prevX = prevState % data.grid_x;\n        const prevY = Math.floor(prevState / data.grid_x);\n        const sourceId = `${prevX},${prevY}`;\n        cy.add({\n          group: 'edges',\n          data: {\n            id: `e${index}`,\n            source: sourceId,\n            target: id\n          }\n        });\n      }\n    });\n\n    // Iterate the whole grid to ensure all nodes are shown\n    for (let y = 0; y < data.grid_y; y++) {\n      for (let x = 0; x < data.grid_x; x++) {\n        const id = `${x},${y}`;\n        // if node is not part of the walk\n        if (!nodeVisits[id]) {\n          cy.add({\n            group: 'nodes',\n            data: {\n              id: id,\n              visitedColor: '#40E0D0',\n              label: `${id}`\n            },\n            position: {\n              x: x * 50,\n              y: y * 50\n            }\n          });\n        }\n      }\n    }\n    // Show tooltip on mouseover\n    cy.on('mouseover', 'node', function (event) {\n      const node = event.target;\n      const nodeId = node.id();\n      const tooltip = document.getElementById('tooltip');\n      // check if the node is part of the walk\n      if (nodeVisits[nodeId]) {\n        const steps = nodeVisits[nodeId].steps.join(', ');\n        tooltip.innerHTML = `Visited on steps ${steps}`;\n      } else {\n        // If the node is not part of the walk\n        tooltip.innerHTML = 'This node was not reached during the walk.';\n      }\n      tooltip.style.display = 'block';\n      tooltip.style.left = `${event.renderedPosition.x}px`;\n      tooltip.style.top = `${event.renderedPosition.y + 450}px`;\n    });\n\n    // Hiding the tooltip when not hovering\n    cy.on('mouseout', 'node', function () {\n      const tooltip = document.getElementById('tooltip');\n      tooltip.style.display = 'none';\n    });\n\n    // Apply layout\n    cy.layout({\n      name: 'preset'\n    }).run();\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: cyRef,\n      style: {\n        width: '100%',\n        height: '600px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"tooltip\",\n      style: {\n        display: 'none',\n        position: 'absolute',\n        backgroundColor: '#342c39',\n        border: '1px solid black',\n        padding: '5px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s(Network, \"l44NKnb2pDeOf4GBSfGBKpLpmXM=\");\n_c = Network;\nexport default Network;\nvar _c;\n$RefreshReg$(_c, \"Network\");","map":{"version":3,"names":["React","useEffect","useRef","cytoscape","cola","jsxDEV","_jsxDEV","use","Network","data","_s","cyRef","cy","container","current","elements","style","selector","label","color","width","layout","name","nodeVisits","x","forEach","index","id","y","count","steps","add","group","visitedColor","position","push","prevState","walk","prevX","grid_x","prevY","Math","floor","sourceId","source","target","grid_y","on","event","node","nodeId","tooltip","document","getElementById","join","innerHTML","display","left","renderedPosition","top","run","children","ref","height","fileName","_jsxFileName","lineNumber","columnNumber","backgroundColor","border","padding","_c","$RefreshReg$"],"sources":["C:/Users/gmate/dev/cytoscape-frontend-random-walk/src/components/Network.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport cytoscape from 'cytoscape';\r\nimport cola from 'cytoscape-cola';\r\n\r\ncytoscape.use(cola);\r\n\r\nconst Network = ({ data }) => {\r\n  const cyRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!data) return;\r\n    \r\n    const cy = cytoscape({\r\n      container: cyRef.current,\r\n      elements: [],\r\n      style: [\r\n        {\r\n          selector: 'node',\r\n          style: {\r\n            'background-color': 'data(visitedColor)',\r\n            label: 'data(label)',\r\n            color: '#333',\r\n            'text-valign': 'center',\r\n            'text-halign': 'center',\r\n          },\r\n        },\r\n        {\r\n          selector: 'edge',\r\n          style: {\r\n            width: 2,\r\n            'line-color': '#ccc',\r\n            'target-arrow-shape': 'triangle',\r\n            'target-arrow-color': '#ccc',\r\n            'curve-style': 'bezier',\r\n          },\r\n        },\r\n      ],\r\n      layout: {\r\n        name: 'preset',\r\n      },\r\n    });\r\n\r\n    const nodeVisits = {}; // Track node visits and steps\r\n\r\n    // Process each step in the walk\r\n    data.x.forEach((x, index) => {\r\n      const id = `${x},${data.y[index]}`;\r\n\r\n      // Record visit and step\r\n      if (!nodeVisits[id]) {\r\n        nodeVisits[id] = { count: 0, steps: [] };\r\n        // create node on the first visit\r\n        cy.add({\r\n          group: 'nodes',\r\n          data: { id: id, visitedColor: '#5f5', label: `${id}` },\r\n          position: { x: x * 50, y: y * 50 },\r\n        });\r\n      }\r\n      nodeVisits[id].count += 1;\r\n      nodeVisits[id].steps.push(index);\r\n\r\n      // Connect nodes with directed edges, considering repeated edges\r\n      if (index > 0) {\r\n        const prevState = data.walk[index - 1];\r\n        const prevX = prevState % data.grid_x;\r\n        const prevY = Math.floor(prevState / data.grid_x);\r\n        const sourceId = `${prevX},${prevY}`;\r\n        cy.add({\r\n          group: 'edges',\r\n          data: {\r\n            id: `e${index}`,\r\n            source: sourceId,\r\n            target: id,\r\n          },\r\n        });\r\n      }\r\n    });\r\n\r\n    // Iterate the whole grid to ensure all nodes are shown\r\n    for (let y = 0; y < data.grid_y; y++) {\r\n      for (let x = 0; x < data.grid_x; x++) {\r\n        const id = `${x},${y}`;\r\n        // if node is not part of the walk\r\n        if (!nodeVisits[id]) {\r\n          cy.add({\r\n            group: 'nodes',\r\n            data: {id: id, visitedColor: '#40E0D0', label: `${id}`},\r\n            position: {x: x * 50, y: y * 50},\r\n          });\r\n        }\r\n      }\r\n    }\r\n    // Show tooltip on mouseover\r\n    cy.on('mouseover', 'node', function(event) {\r\n      const node = event.target;\r\n      const nodeId = node.id();\r\n      const tooltip = document.getElementById('tooltip');\r\n      // check if the node is part of the walk\r\n      if (nodeVisits[nodeId]) {\r\n        const steps = nodeVisits[nodeId].steps.join(', ');\r\n        tooltip.innerHTML = `Visited on steps ${steps}`;\r\n      } else {\r\n         // If the node is not part of the walk\r\n        tooltip.innerHTML = 'This node was not reached during the walk.';\r\n      }\r\n      tooltip.style.display = 'block';\r\n      tooltip.style.left = `${event.renderedPosition.x}px`;\r\n      tooltip.style.top = `${event.renderedPosition.y + 450}px`;\r\n    });\r\n\r\n    // Hiding the tooltip when not hovering\r\n    cy.on('mouseout', 'node', function() {\r\n      const tooltip = document.getElementById('tooltip');\r\n      tooltip.style.display = 'none';\r\n    });\r\n\r\n    // Apply layout\r\n    cy.layout({ name: 'preset' }).run();\r\n\r\n  }, [data]);\r\n\r\n  return (\r\n    <div>\r\n      <div ref={cyRef} style={{ width: '100%', height: '600px' }} />\r\n      <div id=\"tooltip\" style={{ display: 'none', position: 'absolute', backgroundColor: '#342c39', border: '1px solid black', padding: '5px' }}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Network;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}