{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmate\\\\dev\\\\diploma-cytoscape\\\\src\\\\components\\\\Network.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ncytoscape.use(cola);\nconst Network = ({\n  data\n}) => {\n  _s();\n  const cyRef = useRef(null);\n  useEffect(() => {\n    if (!data) return;\n    const cy = cytoscape({\n      container: cyRef.current,\n      elements: [],\n      style: [{\n        selector: 'node',\n        style: {\n          'background-color': 'data(visitedColor)',\n          label: 'data(label)',\n          color: '#333',\n          'text-valign': 'center',\n          'text-halign': 'center'\n        }\n      }, {\n        selector: 'edge',\n        style: {\n          width: 2,\n          'line-color': '#ccc',\n          'target-arrow-shape': 'triangle',\n          'target-arrow-color': '#ccc',\n          'curve-style': 'bezier'\n        }\n      }],\n      layout: {\n        name: 'preset'\n      }\n    });\n    const nodeVisits = {}; // Track node visits and steps\n\n    // Process each step in the walk\n    data.walk.forEach((state, index) => {\n      const x = state % data.grid_x;\n      const y = Math.floor(state / data.grid_x);\n      const id = `${x},${y}`;\n\n      // Record visit and step\n      if (!nodeVisits[id]) {\n        nodeVisits[id] = {\n          count: 0,\n          steps: []\n        };\n        // create node on the first visit\n        cy.add({\n          group: 'nodes',\n          data: {\n            id: id,\n            visitedColor: '#5f5',\n            label: `${id}`\n          },\n          position: {\n            x: x * 50,\n            y: y * 50\n          }\n        });\n      }\n      nodeVisits[id].count += 1;\n      nodeVisits[id].steps.push(index);\n\n      // Connect nodes with directed edges, considering repeated edges\n      if (index > 0) {\n        const prevState = data.walk[index - 1];\n        const prevX = prevState % data.grid_x;\n        const prevY = Math.floor(prevState / data.grid_x);\n        const sourceId = `${prevX},${prevY}`;\n        cy.add({\n          group: 'edges',\n          data: {\n            id: `e${index}`,\n            source: sourceId,\n            target: id\n          }\n        });\n      }\n    });\n\n    // Show tooltip on mouseover\n    cy.on('mouseover', 'node', function (event) {\n      const node = event.target;\n      const steps = nodeVisits[node.id()].steps.join(', ');\n      const tooltip = document.getElementById('tooltip');\n      tooltip.innerHTML = `Visited on steps ${steps}`;\n      tooltip.style.display = 'block';\n      tooltip.style.left = `${event.renderedPosition.x}px`;\n      tooltip.style.top = `${event.renderedPosition.y - 200}px`;\n    });\n\n    // Hiding the tooltip when not hovering\n    cy.on('mouseout', 'node', function () {\n      const tooltip = document.getElementById('tooltip');\n      tooltip.style.display = 'none';\n    });\n\n    // Apply layout\n    cy.layout({\n      name: 'preset'\n    }).run();\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: cyRef,\n      style: {\n        width: '100%',\n        height: '600px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"tooltip\",\n      style: {\n        display: 'none',\n        position: 'absolute',\n        backgroundColor: 'white',\n        border: '1px solid black',\n        padding: '5px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(Network, \"l44NKnb2pDeOf4GBSfGBKpLpmXM=\");\n_c = Network;\nexport default Network;\nvar _c;\n$RefreshReg$(_c, \"Network\");","map":{"version":3,"names":["React","useEffect","useRef","cytoscape","cola","jsxDEV","_jsxDEV","use","Network","data","_s","cyRef","cy","container","current","elements","style","selector","label","color","width","layout","name","nodeVisits","walk","forEach","state","index","x","grid_x","y","Math","floor","id","count","steps","add","group","visitedColor","position","push","prevState","prevX","prevY","sourceId","source","target","on","event","node","join","tooltip","document","getElementById","innerHTML","display","left","renderedPosition","top","run","children","ref","height","fileName","_jsxFileName","lineNumber","columnNumber","backgroundColor","border","padding","_c","$RefreshReg$"],"sources":["C:/Users/gmate/dev/diploma-cytoscape/src/components/Network.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport cytoscape from 'cytoscape';\r\nimport cola from 'cytoscape-cola';\r\n\r\ncytoscape.use(cola);\r\n\r\nconst Network = ({ data }) => {\r\n  const cyRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!data) return;\r\n    \r\n    const cy = cytoscape({\r\n      container: cyRef.current,\r\n      elements: [],\r\n      style: [\r\n        {\r\n          selector: 'node',\r\n          style: {\r\n            'background-color': 'data(visitedColor)',\r\n            label: 'data(label)',\r\n            color: '#333',\r\n            'text-valign': 'center',\r\n            'text-halign': 'center',\r\n          },\r\n        },\r\n        {\r\n          selector: 'edge',\r\n          style: {\r\n            width: 2,\r\n            'line-color': '#ccc',\r\n            'target-arrow-shape': 'triangle',\r\n            'target-arrow-color': '#ccc',\r\n            'curve-style': 'bezier',\r\n          },\r\n        },\r\n      ],\r\n      layout: {\r\n        name: 'preset',\r\n      },\r\n    });\r\n\r\n    const nodeVisits = {}; // Track node visits and steps\r\n\r\n    // Process each step in the walk\r\n    data.walk.forEach((state, index) => {\r\n      const x = state % data.grid_x;\r\n      const y = Math.floor(state / data.grid_x);\r\n      const id = `${x},${y}`;\r\n\r\n      // Record visit and step\r\n      if (!nodeVisits[id]) {\r\n        nodeVisits[id] = { count: 0, steps: [] };\r\n        // create node on the first visit\r\n        cy.add({\r\n          group: 'nodes',\r\n          data: { id: id, visitedColor: '#5f5', label: `${id}` },\r\n          position: { x: x * 50, y: y * 50 },\r\n        });\r\n      }\r\n      nodeVisits[id].count += 1;\r\n      nodeVisits[id].steps.push(index);\r\n\r\n      // Connect nodes with directed edges, considering repeated edges\r\n      if (index > 0) {\r\n        const prevState = data.walk[index - 1];\r\n        const prevX = prevState % data.grid_x;\r\n        const prevY = Math.floor(prevState / data.grid_x);\r\n        const sourceId = `${prevX},${prevY}`;\r\n        cy.add({\r\n          group: 'edges',\r\n          data: {\r\n            id: `e${index}`,\r\n            source: sourceId,\r\n            target: id,\r\n          },\r\n        });\r\n      }\r\n    });\r\n\r\n    // Show tooltip on mouseover\r\n    cy.on('mouseover', 'node', function(event) {\r\n      const node = event.target;\r\n      const steps = nodeVisits[node.id()].steps.join(', ');\r\n      const tooltip = document.getElementById('tooltip');\r\n      tooltip.innerHTML = `Visited on steps ${steps}`;\r\n      tooltip.style.display = 'block';\r\n      tooltip.style.left = `${event.renderedPosition.x}px`;\r\n      tooltip.style.top = `${event.renderedPosition.y - 200}px`;\r\n    });\r\n\r\n    // Hiding the tooltip when not hovering\r\n    cy.on('mouseout', 'node', function() {\r\n      const tooltip = document.getElementById('tooltip');\r\n      tooltip.style.display = 'none';\r\n    });\r\n\r\n    // Apply layout\r\n    cy.layout({ name: 'preset' }).run();\r\n\r\n  }, [data]);\r\n\r\n  return (\r\n    <div>\r\n      <div ref={cyRef} style={{ width: '100%', height: '600px' }} />\r\n      <div id=\"tooltip\" style={{ display: 'none', position: 'absolute', backgroundColor: 'white', border: '1px solid black', padding: '5px' }}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Network;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}